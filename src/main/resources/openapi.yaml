openapi: 3.1.1
info:
  title: demo
  description: Demo project with authentication
  termsOfService: https://www.flavien.io
  contact:
    email: perier@flavien.io
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8080

tags:
  - name: Session
    description: User session management.
  - name: User
    description: User account management.

paths:
  /api/session/login:
    post:
      tags:
        - Session
      summary: User authentication.
      operationId: login
      requestBody:
        description: Authentication information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "200":
          description: Session values.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionDto"

  /api/session/logout:
    delete:
      tags:
        - Session
      summary: Delete current session.
      operationId: logout
      responses:
        "204":
          description: Session deleted.
      security:
        - bearer: [ user, admin ]

  /api/session:
    post:
      tags:
        - Session
      summary: Renewing a session.
      operationId: renewSession
      requestBody:
        description: Session information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionRenewalDto"
      responses:
        "200":
          description: Session values.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionDto"

    get:
      tags:
        - Session
      summary: Lists the user's active sessions.
      operationId: findSessions
      responses:
        "200":
          description: Session list.
          content:
            application/json:
              schema:
                type: array
                description: List of active refresh tokens.
                items:
                  $ref: "#/components/schemas/RefreshTokenPropertiesDto"
      security:
        - bearer: [ user, admin ]

  /api/session/{sessionUuid}:
    delete:
      tags:
        - Session
      summary: Delete a session via its uuid.
      operationId: deleteSession
      parameters:
        - name: sessionUuid
          description: The refreshToken to delete
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/uuid"
      responses:
        "204":
          description: Session deleted.
      security:
        - bearer: [ user, admin ]

  /api/user:
    post:
      tags:
        - User
      summary: Creation of a new account for an user.
      operationId: createUser
      requestBody:
        description: User account information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationDto"
        required: true
      responses:
        "204":
          description: User created.

  /api/user/activate:
    post:
      tags:
        - User
      summary: Activate a user after creation using the token sent by email.
      operationId: activateUser
      parameters:
        - name: token
          description: Activation token sent by email.
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/token"
      responses:
        "204":
          description: The user has been activated.

  /api/user/password:
    get:
      tags:
        - User
      summary: Send a token by email to change password.
      operationId: forgotPassword
      parameters:
        - name: email
          description: Email address to which to send the token.
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/email"
      responses:
        "204":
          description: The email has been sent.

    post:
      tags:
        - User
      summary: Use the token sent by email to change password.
      operationId: updatePassword
      requestBody:
        description: The new password and token.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordDto"
        required: true
      responses:
        "204":
          description: User created.

  /api/user/me:
    get:
      tags:
        - User
      summary: Returns the user sending the request.
      operationId: getUserMe
      responses:
        "200":
          description: The user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
      security:
        - bearer: [ user, admin ]

    put:
      tags:
        - User
      summary: Modifies the user sending the request.
      operationId: updateUserMe
      requestBody:
        description: User account information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateDto"
      responses:
        "200":
          description: The user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
      security:
        - bearer: [ user, admin ]

    delete:
      tags:
        - User
      summary: Deletes the user sending the request.
      operationId: deleteUserMe
      responses:
        "204":
          description: The user has been deleted.
      security:
        - bearer: [ user ]

  /api/user/{userMail}:
    get:
      tags:
        - User
      summary: Returns information about an user.
      operationId: getUser
      parameters:
        - name: userMail
          description: User's email address.
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/email"
      responses:
        "200":
          description: The user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
      security:
        - bearer: [ admin ]

    put:
      tags:
        - User
      summary: Updating information about an user.
      operationId: updateUser
      parameters:
        - name: userMail
          description: User's email address.
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/email"
      requestBody:
        description: User account information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateAdminDto"
      responses:
        "200":
          description: The user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
      security:
        - bearer: [ admin ]

    delete:
      tags:
        - User
      summary: Deleting a user.
      operationId: deleteUser
      parameters:
        - name: userMail
          description: User's email address.
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/email"
      responses:
        "204":
          description: The user has been deleted.
      security:
        - bearer: [ admin ]

  /api/users:
    get:
      tags:
        - User
      summary: Returns a list of users.
      operationId: findUsers
      parameters:
        - name: q
          description: Partial search of the user's email address.
          in: query
          required: false
          schema:
            type: string
            maxLength: 100
            pattern: ^[^${}\[\]"`\\]*$
        - name: page
          description: Page number.
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000000
        - name: pageSize
          description: Number of elements per page.
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 1000000
        - name: sortColumn
          description: Indicates which column will be used for sorting.
          in: query
          required: false
          schema:
            type: string
            enum: [ email, firstname, lastname ]
        - name: sortOrder
          description: Order of the sorting function.
          in: query
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
      responses:
        "200":
          description: The subscription type list.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPageDto"
      security:
        - bearer: [ admin ]

components:
  schemas:
    email:
      type: string
      description: Email of the user.
      example: "perier@flavien.io"
      maxLength: 100
      format: email

    password:
      type: string
      description: User password.
      example: "password"
      maxLength: 100
      format: password

    proofOfWork:
      type: string
      description: The scrypted password.
      example: "password"
      maxLength: 64
      pattern: ^[a-fA-F0-9]{64}$
      format: password

    token:
      type: string
      description: Random token format.
      example: "RANDOMTOKEN"
      maxLength: 64
      pattern: ^[a-zA-Z1-9]{64}$

    uuid:
      type: string
      description: Universally unique identifier
      example: "1562e7b4-14dc-4891-8b6c-a791e7d7c293"
      maxLength: 37
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$

    refreshToken:
      type: string
      description: User refresh token.
      example: "AZERTYUIOPQSDFGHJKLM"
      maxLength: 64
      pattern: ^[A-Za-z0-9]*$

    accessToken:
      type: string
      description: User access token.
      example: "AZERTYUIOPQSDFGHJKLM"
      maxLength: 64
      pattern: ^[A-Za-z0-9]*$

    Role:
      type: string
      description: The user's role.
      enum: [USER, ADMIN]

    LoginDto:
      type: object
      description: Authentication information.
      required:
        - email
        - password
        - proofOfWork
      properties:
        email:
          $ref: "#/components/schemas/email"
        password:
          $ref: "#/components/schemas/password"
        proofOfWork:
          $ref: "#/components/schemas/proofOfWork"

    SessionDto:
      type: object
      description: Authentication Session.
      required:
        - accessToken
      properties:
        refreshToken:
          $ref: "#/components/schemas/refreshToken"
        accessToken:
          $ref: "#/components/schemas/accessToken"

    SessionRenewalDto:
      type: object
      description: Information required to renew a session.
      required:
        - email
        - refreshToken
      properties:
        email:
          $ref: "#/components/schemas/email"
        refreshToken:
          $ref: "#/components/schemas/refreshToken"

    RefreshTokenPropertiesDto:
      type: object
      description: Information identifying a refresh token.
      required:
        - uuid
        - creationDate
      properties:
        uuid:
          $ref: "#/components/schemas/uuid"
        creationDate:
          type: string
          format: date-time

    UserDto:
      type: object
      description: An account of an user or an organization.
      required:
        - email
      properties:
        email:
          $ref: "#/components/schemas/email"
        role:
          $ref: "#/components/schemas/Role"

    UserCreationDto:
      type: object
      description: An account of an user or an organization.
      required:
        - email
        - password
        - proofOfWork
      properties:
        email:
          $ref: "#/components/schemas/email"
        password:
          $ref: "#/components/schemas/password"
        proofOfWork:
          $ref: "#/components/schemas/proofOfWork"

    UserUpdateDto:
      type: object
      description: An account of an user or an organization.
      required:
        - email
        - password
        - proofOfWork
      properties:
        email:
          $ref: "#/components/schemas/email"
        password:
          $ref: "#/components/schemas/password"
        proofOfWork:
          $ref: "#/components/schemas/proofOfWork"

    UserUpdateAdminDto:
      type: object
      description: An account of an user or an organization.
      required:
        - email
        - password
        - proofOfWork
      properties:
        email:
          $ref: "#/components/schemas/email"
        password:
          $ref: "#/components/schemas/password"
        proofOfWork:
          $ref: "#/components/schemas/proofOfWork"
        role:
          $ref: "#/components/schemas/Role"

    UserPageDto:
      type: object
      description: A page of user.
      required:
        - totalElements
        - totalPages
        - content
      properties:
        totalElements:
          type: integer
          description: Total elements.
          minimum: 0
          format: int64
        totalPages:
          type: integer
          description: Total pages.
          minimum: 0
          format: int32
        content:
          type: array
          description: Content.
          items:
            $ref: "#/components/schemas/UserDto"

    ChangePasswordDto:
      type: object
      description: Change password after forgetting it.
      required:
        - token
        - password
        - proofOfWork
      properties:
        token:
          $ref: "#/components/schemas/token"
        password:
          $ref: "#/components/schemas/password"
        proofOfWork:
          $ref: "#/components/schemas/proofOfWork"

  securitySchemes:
    bearer:
      type: http
      scheme: bearer
